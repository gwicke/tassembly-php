<?php namespace Knockoff;
use Exception;

/**
 * Template assembly language (tassembly) PHP runtime.
 *
 * @file
 * @ingroup Extensions
 * @copyright 2011-2013; see AUTHORS.txt
 * @license The MIT License (MIT); see LICENSE.txt
 */

class Tassembly {
	/**
	 * Render an intermediate representation object into HTML
	 *
	 * @param IrObject $ir
	 * @param string[] $scope
	 *
	 * @return string HTML
	 */
	public static function render( IrObject $ir, $scope = array() ) {
		$output = array();

		foreach ( $ir as $bit ) {
			if ( is_string( $bit ) ) {
				$output[] = $bit;
			} elseif ( is_array( $bit ) ) {
				$fnName = $bit[0];

				if ( $fnName === 'text' ) {
					/*
						val = this._evalExpr(bit[1], scope);
						if (!val && val !== 0) {
							val = '';
						}
						cb( ('' + val) // convert to string
								.replace(/[<&]/g, this._xmlEncoder)); // and escape
					 */
				} elseif ( $fnName === 'attr' ) {

				} else {

				}
			} else {
				// No clue what this is
				throw new TassemblyException(
					'Unknown type in intermediate representation. Expecting string or array.',
					$bit
				);
			}
		}
	}

	private static function evaluate_expression( $expr, $scope ) {
		// Simple variable
		if ( preg_match( '/^[a-zA-Z_]+$/', $expr ) ) {
			return ( array_key_exists( $expr, $scope ) ? $scope[$expr] : $expr );
		}

		// String literal
		if ( preg_match( '/^\'.*\'$/', $expr ) ) {
			return str_replace( '\\\'', '\'', substr( $expr, 1, -1 ) );
		}

		// Object dot notation
		if ( preg_match( '/^[a-zA-Z_]+[.a-zA-Z_]+$/', $expr ) ) {
			$path = explode( '.', $expr );
			$ls = $scope;
			foreach( $path as $key ) {
				if ( array_key_exists( $key, $ls ) ) {
					$ls = $scope[$key];
				}
			}
			return strval( $ls );
		}

		// Otherwise just return the expression. At some point we may allow more
		// complicated things (like function calls... but not now.)
		return $expr;
	}
}

class TassemblyException extends \MWException {
	public function __construct($message = "", $ir = '', $code = 0, Exception $previous = null) {
		parent::__construct($message,$code,$previous); // TODO: Change the autogenerated stub
	}
}

/**
 * Class IrObject
 * @package Stencil
 */
class IrObject implements \Iterator, \JsonSerializable {
	/**
	 * (PHP 5 &gt;= 5.0.0)<br/>
	 * Return the current element
	 * @link http://php.net/manual/en/iterator.current.php
	 * @return mixed Can return any type.
	 */
	public function current() {
		// TODO: Implement current() method.
	}

	/**
	 * (PHP 5 &gt;= 5.0.0)<br/>
	 * Move forward to next element
	 * @link http://php.net/manual/en/iterator.next.php
	 * @return void Any returned value is ignored.
	 */
	public function next() {
		// TODO: Implement next() method.
	}

	/**
	 * (PHP 5 &gt;= 5.0.0)<br/>
	 * Return the key of the current element
	 * @link http://php.net/manual/en/iterator.key.php
	 * @return mixed scalar on success, or null on failure.
	 */
	public function key() {
		// TODO: Implement key() method.
	}

	/**
	 * (PHP 5 &gt;= 5.0.0)<br/>
	 * Checks if current position is valid
	 * @link http://php.net/manual/en/iterator.valid.php
	 * @return boolean The return value will be casted to boolean and then evaluated.
	 * Returns true on success or false on failure.
	 */
	public function valid() {
		// TODO: Implement valid() method.
	}

	/**
	 * (PHP 5 &gt;= 5.0.0)<br/>
	 * Rewind the Iterator to the first element
	 * @link http://php.net/manual/en/iterator.rewind.php
	 * @return void Any returned value is ignored.
	 */
	public function rewind() {
		// TODO: Implement rewind() method.
	}

	function __wakeup() {
		// TODO: Implement __wakeup() method.
	}

	/**
	 * (PHP 5 &gt;= 5.4.0)<br/>
	 * Specify data which should be serialized to JSON
	 * @link http://php.net/manual/en/jsonserializable.jsonserialize.php
	 * @return mixed data which can be serialized by <b>json_encode</b>,
	 * which is a value of any type other than a resource.
	 */
	public function jsonSerialize() {
		// TODO: Implement jsonSerialize() method.
	}
}