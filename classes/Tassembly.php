<?php namespace Knockoff;
use Exception;

/**
 * Template assembly language (tassembly) PHP runtime.
 *
 * @file
 * @ingroup Extensions
 * @copyright 2011-2013; see AUTHORS.txt
 * @license The MIT License (MIT); see LICENSE.txt
 */

class Tassembly {
	/**
	 * Render an intermediate representation object into HTML
	 *
	 * @param IrObject $ir
	 * @param string[] $model
	 *
	 * @throws TassemblyException if a subpart is not a 2-tuple, or if a control function is not known
	 *
	 * @return string HTML
	 */
	public static function render( IrObject $ir, $model = array() ) {
		$bits = array();
		$context = TassemblyContext::createRootContextFromModel( $model, array() );

		foreach( $ir as $bit ) {
			if ( is_string( $bit ) ) {
				$bits[] = $bit;
			} elseif ( is_array( $bit ) && size( $bit ) === 2 ) {
				// Control function
				list( $ctlFn, $ctlOpts ) = $bit;
				if ( $ctlFn === 'text' ) {
					$val = Tassembly::evaluate_expression( $ctlOpts, $context );
					if ( is_null( $val ) ) {
						$val = '';
					}
					$bits[] = htmlspecialchars( $val, ENT_XML1 );
				} elseif ( method_exists( 'Tassembly', 'ctlFn_' . $ctlFn ) ) {
					$fnName = 'ctlFn_' . $ctlFn;
					$bits[] = Tassembly::$fnName( $ctlOpts, $context );
				}
			} else {
				throw new TassemblyException( 'Unsupported operation on sub template', $bit );
			}
		}

		return join('', $bits);
	}

	private static function evaluate_expression( $expr, TassemblyContext $context ) {
		/*
		 * var func = this.cache['expr' + expression];
	if (!func) {

		var simpleMatch = expression.match(simpleBindingVar);
		if (simpleMatch) {
			var ctxMember = simpleMatch[1],
				key = simpleMatch[2];
			return ctx[ctxMember][key];
		}

		// String literal
		if (/^'.*'$/.test(expression)) {
			return expression.slice(1,-1).replace(/\\'/g, "'");
		}

		func = new Function('c', 'var m = c.m;'
				+ 'return ' + rewriteExpression(expression));
		this.cache['expr' + expression] = func;
	}
	if (func) {
		try {
			return func(ctx);
		}  catch (e) {
			console.log(e);
			return '';
		}
	}
		 */

		// Simple variable
		$matches = array();
		if ( preg_match( '/^(m|p(?:[cm]s?)?|rm|i|c)\.([a-zA-Z_$]+)$/', $expr, $matches ) ) {
			list( $x, $member, $key ) = $matches;
			if ( $member == 'i' ) { throw new \Exception('Need to implement iterators!'); }
			return ( array_key_exists( $key, $context[$member] ) ? $context[$member][$key] : $expr );
		}

		// String literal
		if ( preg_match( '/^\'.*\'$/', $expr ) ) {
			return str_replace( '\\\'', '\'', substr( $expr, 1, -1 ) );
		}

		// Object dot notation
		if ( preg_match( '/^[a-zA-Z_]+[.a-zA-Z_]+$/', $expr ) ) {
			$path = explode( '.', $expr );
			$ls = $scope;
			foreach( $path as $key ) {
				if ( array_key_exists( $key, $ls ) ) {
					$ls = $scope[$key];
				}
			}
			return strval( $ls );
		}

		// Otherwise just return the expression. At some point we may allow more
		// complicated things (like function calls... but not now).
		return $expr;
	}
}

class TassemblyException extends \MWException {
	public function __construct($message = "", $ir = '', $code = 0, Exception $previous = null) {
		parent::__construct($message,$code,$previous); // TODO: Change the autogenerated stub
	}
}

class TassemblyContext implements \ArrayAccess {
	/** @var TassemblyContext Root context object */
	public $rc;

	/** @var string[] Root model array */
	public $rm;

	/** @var string[] Array of references to parent models, [0] is the immediate parent. */
	public $pms;

	/** @var string[] Reference to the parent model */
	public $pm;

	/** @var TassemblyContext[] Array of references to parent contexts. [0] is the immediate parent. */
	public $pcs;

	/** @var TassemblyContext Reference to the parent context object */
	public $pc;

	/** @var string[] Model for the current context (holds locals) */
	public $m;

	/** @var array() Reference to the global object for function calls */
	public $g;

	public static function createRootContextFromModel( $model, $globals ) {
		$ctx = new TassemblyContext();
		$ctx->rm = $model;
		$ctx->m = &$ctx->rm;
		$ctx->pms = array();
		$ctx->pcs = array();
		$ctx->g = &$globals;

		return $ctx;
	}

	public function offsetExists( $offset ) {
		return isset( $this->$offset );
	}

	public function offsetGet( $offset ) {
		return $this->$offset;
	}

	public function offsetSet( $offset, $value ) {
		if ( property_exists( $this, $offset ) ) {
			$this->$offset = $value;
		} else {
			throw new TassemblyException( "Can not set property '$offset' on TassemblyContext object" );
		}
	}

	public function offsetUnset( $offset ) {
		$this->$offset = null;
	}

	protected function __construct() {
		// Just making sure we can only use generators to construct this object
	}
}

/**
 * Class IrObject
 * @package Stencil
 */
class IrObject implements \Iterator, \JsonSerializable {
	/**
	 * (PHP 5 &gt;= 5.0.0)<br/>
	 * Return the current element
	 * @link http://php.net/manual/en/iterator.current.php
	 * @return mixed Can return any type.
	 */
	public function current() {
		// TODO: Implement current() method.
	}

	/**
	 * (PHP 5 &gt;= 5.0.0)<br/>
	 * Move forward to next element
	 * @link http://php.net/manual/en/iterator.next.php
	 * @return void Any returned value is ignored.
	 */
	public function next() {
		// TODO: Implement next() method.
	}

	/**
	 * (PHP 5 &gt;= 5.0.0)<br/>
	 * Return the key of the current element
	 * @link http://php.net/manual/en/iterator.key.php
	 * @return mixed scalar on success, or null on failure.
	 */
	public function key() {
		// TODO: Implement key() method.
	}

	/**
	 * (PHP 5 &gt;= 5.0.0)<br/>
	 * Checks if current position is valid
	 * @link http://php.net/manual/en/iterator.valid.php
	 * @return boolean The return value will be casted to boolean and then evaluated.
	 * Returns true on success or false on failure.
	 */
	public function valid() {
		// TODO: Implement valid() method.
	}

	/**
	 * (PHP 5 &gt;= 5.0.0)<br/>
	 * Rewind the Iterator to the first element
	 * @link http://php.net/manual/en/iterator.rewind.php
	 * @return void Any returned value is ignored.
	 */
	public function rewind() {
		// TODO: Implement rewind() method.
	}

	function __wakeup() {
		// TODO: Implement __wakeup() method.
	}

	/**
	 * (PHP 5 &gt;= 5.4.0)<br/>
	 * Specify data which should be serialized to JSON
	 * @link http://php.net/manual/en/jsonserializable.jsonserialize.php
	 * @return mixed data which can be serialized by <b>json_encode</b>,
	 * which is a value of any type other than a resource.
	 */
	public function jsonSerialize() {
		// TODO: Implement jsonSerialize() method.
	}
}